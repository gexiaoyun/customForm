{"ast":null,"code":"function _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport * as React from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Menu from '../../menu';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning';\nimport { ConfigContext } from '../../config-provider';\nimport defaultLocale from '../../locale/en_US';\nvar EMPTY_LIST = []; // TODO: warning if use ajax!!!\n\nexport var SELECTION_ALL = 'SELECT_ALL';\nexport var SELECTION_INVERT = 'SELECT_INVERT';\n\nfunction getFixedType(column) {\n  return column && column.fixed;\n}\n\nfunction flattenData(data, childrenColumnName) {\n  var list = [];\n  (data || []).forEach(function (record) {\n    list.push(record);\n\n    if (childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(record[childrenColumnName], childrenColumnName)));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  var _ref = rowSelection || {},\n      selectedRowKeys = _ref.selectedRowKeys,\n      getCheckboxProps = _ref.getCheckboxProps,\n      onSelectionChange = _ref.onChange,\n      onSelect = _ref.onSelect,\n      onSelectAll = _ref.onSelectAll,\n      onSelectInvert = _ref.onSelectInvert,\n      onSelectMultiple = _ref.onSelectMultiple,\n      _ref$columnWidth = _ref.columnWidth,\n      selectionColWidth = _ref$columnWidth === void 0 ? 60 : _ref$columnWidth,\n      selectionType = _ref.type,\n      selections = _ref.selections,\n      fixed = _ref.fixed;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      _React$useContext$loc = _React$useContext.locale,\n      locale = _React$useContext$loc === void 0 ? defaultLocale : _React$useContext$loc;\n\n  var tableLocale = locale.Table || {};\n  var prefixCls = config.prefixCls,\n      data = config.data,\n      pageData = config.pageData,\n      getRecordByKey = config.getRecordByKey,\n      getRowKey = config.getRowKey,\n      expandType = config.expandType,\n      childrenColumnName = config.childrenColumnName;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      innerSelectedKeys = _React$useState2[0],\n      setInnerSelectedKeys = _React$useState2[1];\n\n  var mergedSelectedKeys = selectedRowKeys || innerSelectedKeys || EMPTY_LIST;\n  var mergedSelectedKeySet = React.useMemo(function () {\n    var keys = selectionType === 'radio' ? mergedSelectedKeys.slice(0, 1) : mergedSelectedKeys;\n    return new Set(keys);\n  }, [mergedSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      lastSelectedKey = _React$useState4[0],\n      setLastSelectedKey = _React$useState4[1]; // Reset if rowSelection reset\n\n\n  React.useEffect(function () {\n    if (!rowSelection) {\n      setInnerSelectedKeys([]);\n    }\n  }, [!!rowSelection]);\n  var setSelectedKeys = React.useCallback(function (keys) {\n    setInnerSelectedKeys(keys);\n    var records = keys.map(function (key) {\n      return getRecordByKey(key);\n    });\n\n    if (onSelectionChange) {\n      onSelectionChange(keys, records);\n    }\n  }, [setInnerSelectedKeys, getRecordByKey, onSelectionChange]); // Trigger single `onSelect` event\n\n  var triggerSingleSelection = React.useCallback(function (key, selected, keys, event) {\n    if (onSelect) {\n      var rows = keys.map(function (k) {\n        return getRecordByKey(k);\n      });\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys);\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  var mergedSelections = React.useMemo(function () {\n    if (!selections) {\n      return null;\n    }\n\n    var selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT] : selections;\n    return selectionList.map(function (selection) {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect: function onSelect() {\n            setSelectedKeys(data.map(function (record, index) {\n              return getRowKey(record, index);\n            }));\n          }\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect: function onSelect() {\n            var keySet = new Set(mergedSelectedKeySet);\n            pageData.forEach(function (record, index) {\n              var key = getRowKey(record, index);\n\n              if (keySet.has(key)) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n            });\n            var keys = Array.from(keySet);\n            setSelectedKeys(keys);\n\n            if (onSelectInvert) {\n              warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.');\n              onSelectInvert(keys);\n            }\n          }\n        };\n      }\n\n      return selection;\n    });\n  }, [selections, mergedSelectedKeySet, pageData, getRowKey]);\n  var transformColumns = React.useCallback(function (columns) {\n    if (!rowSelection) {\n      return columns;\n    } // Get flatten data\n\n\n    var flattedData = flattenData(pageData, childrenColumnName); // Support selection\n\n    var keySet = new Set(mergedSelectedKeySet); // Get all checkbox props\n\n    var checkboxPropsMap = new Map();\n    flattedData.forEach(function (record, index) {\n      var key = getRowKey(record, index);\n      var checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      checkboxPropsMap.set(key, checkboxProps);\n\n      if (process.env.NODE_ENV !== 'production' && ('checked' in checkboxProps || 'defaultChecked' in checkboxProps)) {\n        warning(false, 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.');\n      }\n    }); // Record key only need check with enabled\n\n    var recordKeys = flattedData.map(getRowKey).filter(function (key) {\n      return !checkboxPropsMap.get(key).disabled;\n    });\n    var checkedCurrentAll = recordKeys.every(function (key) {\n      return keySet.has(key);\n    });\n    var checkedCurrentSome = recordKeys.some(function (key) {\n      return keySet.has(key);\n    });\n\n    var onSelectAllChange = function onSelectAllChange() {\n      var changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(function (key) {\n          keySet[\"delete\"](key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(function (key) {\n          keySet.add(key);\n          changeKeys.push(key);\n        });\n      }\n\n      var keys = Array.from(keySet);\n      setSelectedKeys(keys);\n\n      if (onSelectAll) {\n        onSelectAll(!checkedCurrentAll, keys.map(function (k) {\n          return getRecordByKey(k);\n        }), changeKeys.map(function (k) {\n          return getRecordByKey(k);\n        }));\n      }\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    var title;\n\n    if (selectionType !== 'radio') {\n      var customizeSelections;\n\n      if (mergedSelections) {\n        var menu = React.createElement(Menu, null, mergedSelections.map(function (selection, index) {\n          var key = selection.key,\n              text = selection.text,\n              onSelectionClick = selection.onSelect;\n          return React.createElement(Menu.Item, {\n            key: key || index,\n            onClick: function onClick() {\n              if (onSelectionClick) {\n                onSelectionClick(recordKeys);\n              }\n            }\n          }, text);\n        }));\n        customizeSelections = React.createElement(\"div\", {\n          className: \"\".concat(prefixCls, \"-selection-extra\")\n        }, React.createElement(Dropdown, {\n          overlay: menu\n        }, React.createElement(\"span\", null, React.createElement(DownOutlined, null))));\n      }\n\n      var allDisabled = flattedData.every(function (record, index) {\n        var key = getRowKey(record, index);\n        var checkboxProps = checkboxPropsMap.get(key) || {};\n        return checkboxProps.disabled;\n      });\n      title = React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-selection\")\n      }, React.createElement(Checkbox, {\n        checked: !allDisabled && !!flattedData.length && checkedCurrentAll,\n        indeterminate: !checkedCurrentAll && checkedCurrentSome,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled\n      }), customizeSelections);\n    } // Body Cell\n\n\n    var renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        return React.createElement(Radio, _extends({}, checkboxPropsMap.get(key), {\n          checked: keySet.has(key),\n          onChange: function onChange(event) {\n            if (!keySet.has(key)) {\n              triggerSingleSelection(key, true, [key], event.nativeEvent);\n            }\n          }\n        }));\n      };\n    } else {\n      renderCell = function renderCell(_, record, index) {\n        var key = getRowKey(record, index);\n        var hasKey = keySet.has(key); // Record checked\n\n        return React.createElement(Checkbox, _extends({}, checkboxPropsMap.get(key), {\n          checked: hasKey,\n          onChange: function onChange(_ref2) {\n            var nativeEvent = _ref2.nativeEvent;\n            var shiftKey = nativeEvent.shiftKey;\n            var startIndex = -1;\n            var endIndex = -1; // Get range of this\n\n            if (shiftKey) {\n              var pointKeys = new Set([lastSelectedKey, key]);\n              recordKeys.some(function (recordKey, recordIndex) {\n                if (pointKeys.has(recordKey)) {\n                  if (startIndex === -1) {\n                    startIndex = recordIndex;\n                  } else {\n                    endIndex = recordIndex;\n                    return true;\n                  }\n                }\n\n                return false;\n              });\n            }\n\n            if (endIndex !== -1 && startIndex !== endIndex) {\n              // Batch update selections\n              var rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n              var changedKeys = [];\n\n              if (hasKey) {\n                rangeKeys.forEach(function (recordKey) {\n                  if (keySet.has(recordKey)) {\n                    changedKeys.push(recordKey);\n                    keySet[\"delete\"](recordKey);\n                  }\n                });\n              } else {\n                rangeKeys.forEach(function (recordKey) {\n                  if (!keySet.has(recordKey)) {\n                    changedKeys.push(recordKey);\n                    keySet.add(recordKey);\n                  }\n                });\n              }\n\n              var keys = Array.from(keySet);\n              setSelectedKeys(keys);\n\n              if (onSelectMultiple) {\n                onSelectMultiple(!hasKey, keys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }), changedKeys.map(function (recordKey) {\n                  return getRecordByKey(recordKey);\n                }));\n              }\n            } else {\n              // Single record selected\n              if (hasKey) {\n                keySet[\"delete\"](key);\n              } else {\n                keySet.add(key);\n              }\n\n              triggerSingleSelection(key, !hasKey, Array.from(keySet), nativeEvent);\n            }\n\n            setLastSelectedKey(key);\n          }\n        }));\n      };\n    } // Columns\n\n\n    var selectionColumn = {\n      width: selectionColWidth,\n      className: \"\".concat(prefixCls, \"-selection-column\"),\n      title: rowSelection.columnTitle || title,\n      render: renderCell\n    };\n\n    if (expandType === 'row' && columns.length) {\n      var _columns = _toArray(columns),\n          expandColumn = _columns[0],\n          restColumns = _columns.slice(1);\n\n      return [expandColumn, _extends(_extends({}, selectionColumn), {\n        fixed: fixed || getFixedType(restColumns[0])\n      })].concat(_toConsumableArray(restColumns));\n    }\n\n    return [_extends(_extends({}, selectionColumn), {\n      fixed: fixed || getFixedType(columns[0])\n    })].concat(_toConsumableArray(columns));\n  }, [getRowKey, pageData, rowSelection, innerSelectedKeys, mergedSelectedKeys, selectionColWidth, mergedSelections, expandType, lastSelectedKey, onSelectMultiple, triggerSingleSelection]);\n  return [transformColumns, mergedSelectedKeySet];\n}","map":null,"metadata":{},"sourceType":"module"}