{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nimport * as React from 'react';\nimport { getColumnPos, renderColumnTitle, getColumnKey } from '../../util';\nimport FilterDropdown from './FilterDropdown';\nimport { ConfigContext } from '../../../config-provider';\nimport defaultLocale from '../../../locale/en_US';\n\nfunction collectFilterStates(columns, init, pos) {\n  var filterStates = [];\n  (columns || []).forEach(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n\n    if ('children' in column) {\n      filterStates = [].concat(_toConsumableArray(filterStates), _toConsumableArray(collectFilterStates(column.children, init, columnPos)));\n    } else if ('filters' in column || 'filterDropdown' in column) {\n      if ('filteredValue' in column) {\n        // Controlled\n        filterStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: column.filteredValue\n        });\n      } else {\n        // Uncontrolled\n        filterStates.push({\n          column: column,\n          key: getColumnKey(column, columnPos),\n          filteredKeys: init && column.defaultFilteredValue ? column.defaultFilteredValue : undefined\n        });\n      }\n    }\n  });\n  return filterStates;\n}\n\nfunction injectFilter(prefixCls, dropdownPrefixCls, columns, filterStates, triggerFilter, getPopupContainer, locale, pos) {\n  return columns.map(function (column, index) {\n    var columnPos = getColumnPos(index, pos);\n    var _column$filterMultipl = column.filterMultiple,\n        filterMultiple = _column$filterMultipl === void 0 ? true : _column$filterMultipl;\n\n    if ('filters' in column || 'filterDropdown' in column) {\n      var columnKey = getColumnKey(column, columnPos);\n      var filterState = filterStates.find(function (_ref) {\n        var key = _ref.key;\n        return columnKey === key;\n      });\n      return _extends(_extends({}, column), {\n        title: function title(renderProps) {\n          return React.createElement(FilterDropdown, {\n            prefixCls: \"\".concat(prefixCls, \"-filter\"),\n            dropdownPrefixCls: dropdownPrefixCls,\n            column: column,\n            columnKey: columnKey,\n            filterState: filterState,\n            filterMultiple: filterMultiple,\n            triggerFilter: triggerFilter,\n            locale: locale,\n            getPopupContainer: getPopupContainer\n          }, renderColumnTitle(column.title, renderProps));\n        }\n      });\n    }\n\n    if ('children' in column) {\n      return _extends(_extends({}, column), {\n        children: injectFilter(prefixCls, dropdownPrefixCls, column.children, filterStates, triggerFilter, getPopupContainer, locale, columnPos)\n      });\n    }\n\n    return column;\n  });\n}\n\nfunction generateFilterInfo(filterStates) {\n  var currentFilters = {};\n  filterStates.forEach(function (_ref2) {\n    var key = _ref2.key,\n        filteredKeys = _ref2.filteredKeys;\n    currentFilters[key] = filteredKeys || null;\n  });\n  return currentFilters;\n}\n\nfunction flattenKeys(filters) {\n  var keys = [];\n  (filters || []).forEach(function (_ref3) {\n    var value = _ref3.value,\n        children = _ref3.children;\n    keys.push(value);\n\n    if (children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(flattenKeys(children)));\n    }\n  });\n  return keys;\n}\n\nexport function getFilterData(data, filterStates) {\n  return filterStates.reduce(function (currentData, filterState) {\n    var _filterState$column = filterState.column,\n        onFilter = _filterState$column.onFilter,\n        filters = _filterState$column.filters,\n        filteredKeys = filterState.filteredKeys;\n\n    if (onFilter && filteredKeys && filteredKeys.length) {\n      return currentData.filter(function (record) {\n        return filteredKeys.some(function (key) {\n          var keys = flattenKeys(filters);\n          var keyIndex = keys.findIndex(function (k) {\n            return String(k) === String(key);\n          });\n          var realKey = keyIndex !== -1 ? keys[keyIndex] : key;\n          return onFilter(realKey, record);\n        });\n      });\n    }\n\n    return currentData;\n  }, data);\n}\n\nfunction useFilter(_ref4) {\n  var prefixCls = _ref4.prefixCls,\n      _ref4$dropdownPrefixC = _ref4.dropdownPrefixCls,\n      dropdownPrefixCls = _ref4$dropdownPrefixC === void 0 ? 'ant-dropdown' : _ref4$dropdownPrefixC,\n      columns = _ref4.columns,\n      onFilterChange = _ref4.onFilterChange,\n      getPopupContainer = _ref4.getPopupContainer;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      _React$useContext$loc = _React$useContext.locale,\n      locale = _React$useContext$loc === void 0 ? defaultLocale : _React$useContext$loc;\n\n  var tableLocale = locale.Table || {};\n\n  var _React$useState = React.useState(collectFilterStates(columns, true)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      filterStates = _React$useState2[0],\n      setFilterStates = _React$useState2[1];\n\n  var mergedFilterStates = React.useMemo(function () {\n    var collectedStates = collectFilterStates(columns, false); // Return if not controlled\n\n    if (collectedStates.every(function (_ref5) {\n      var filteredKeys = _ref5.filteredKeys;\n      return filteredKeys === undefined;\n    })) {\n      return filterStates;\n    }\n\n    return collectedStates;\n  }, [columns, filterStates]);\n  var getFilters = React.useCallback(function () {\n    return generateFilterInfo(mergedFilterStates);\n  }, [mergedFilterStates]);\n\n  var triggerFilter = function triggerFilter(filterState) {\n    var newFilterStates = mergedFilterStates.filter(function (_ref6) {\n      var key = _ref6.key;\n      return key !== filterState.key;\n    });\n    newFilterStates.push(filterState);\n    setFilterStates(newFilterStates);\n    onFilterChange(generateFilterInfo(newFilterStates), newFilterStates);\n  };\n\n  var transformColumns = function transformColumns(innerColumns) {\n    return injectFilter(prefixCls, dropdownPrefixCls, innerColumns, mergedFilterStates, triggerFilter, getPopupContainer, tableLocale);\n  };\n\n  return [transformColumns, mergedFilterStates, getFilters];\n}\n\nexport default useFilter;","map":null,"metadata":{},"sourceType":"module"}