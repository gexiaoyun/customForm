{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport shallowEqual from 'shallowequal';\nimport { FilterFilled } from '@ant-design/icons';\nimport Menu from '../../../menu';\nimport Checkbox from '../../../checkbox';\nimport Radio from '../../../radio';\nimport Dropdown from '../../../dropdown';\nimport FilterDropdownMenuWrapper from './FilterWrapper';\nimport useSyncState from '../useSyncState';\nvar SubMenu = Menu.SubMenu,\n    MenuItem = Menu.Item;\n\nfunction hasSubMenu(filters) {\n  return filters.some(function (_ref) {\n    var children = _ref.children;\n    return children;\n  });\n}\n\nfunction renderFilterItems(filters, prefixCls, filteredKeys, multiple) {\n  return filters.map(function (filter, index) {\n    if (filter.children) {\n      return React.createElement(SubMenu, {\n        key: filter.value || index,\n        title: filter.text,\n        popupClassName: \"\".concat(prefixCls, \"-dropdown-submenu\")\n      }, renderFilterItems(filter.children, prefixCls, filteredKeys, multiple));\n    }\n\n    var Component = multiple ? Checkbox : Radio;\n    return React.createElement(MenuItem, {\n      key: filter.value !== undefined ? filter.value : index\n    }, React.createElement(Component, {\n      checked: filteredKeys.includes(String(filter.value))\n    }), React.createElement(\"span\", null, filter.text));\n  });\n}\n\nfunction FilterDropdown(props) {\n  var prefixCls = props.prefixCls,\n      column = props.column,\n      dropdownPrefixCls = props.dropdownPrefixCls,\n      columnKey = props.columnKey,\n      filterMultiple = props.filterMultiple,\n      filterState = props.filterState,\n      triggerFilter = props.triggerFilter,\n      locale = props.locale,\n      children = props.children,\n      getPopupContainer = props.getPopupContainer;\n  var filterDropdownVisible = column.filterDropdownVisible,\n      onFilterDropdownVisibleChange = column.onFilterDropdownVisibleChange;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      visible = _React$useState2[0],\n      setVisible = _React$useState2[1];\n\n  var filtered = !!(filterState && filterState.filteredKeys);\n\n  var triggerVisible = function triggerVisible(newVisible) {\n    setVisible(newVisible);\n\n    if (onFilterDropdownVisibleChange) {\n      onFilterDropdownVisibleChange(newVisible);\n    }\n  };\n\n  var mergedVisible = typeof filterDropdownVisible === 'boolean' ? filterDropdownVisible : visible; // ===================== Select Keys =====================\n\n  var _React$useState3 = React.useState(filterState && filterState.filteredKeys),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      propFilteredKeys = _React$useState4[0],\n      setPropFilteredKeys = _React$useState4[1];\n\n  var _useSyncState = useSyncState(propFilteredKeys || []),\n      _useSyncState2 = _slicedToArray(_useSyncState, 2),\n      getFilteredKeysSync = _useSyncState2[0],\n      setFilteredKeysSync = _useSyncState2[1];\n\n  var onSelectKeys = function onSelectKeys(_ref2) {\n    var selectedKeys = _ref2.selectedKeys;\n    setFilteredKeysSync(selectedKeys);\n  };\n\n  React.useEffect(function () {\n    // Sync internal filtered keys when props key changed\n    var newFilteredKeys = filterState && filterState.filteredKeys;\n\n    if (!shallowEqual(propFilteredKeys, newFilteredKeys)) {\n      setPropFilteredKeys(newFilteredKeys);\n      onSelectKeys({\n        selectedKeys: newFilteredKeys || []\n      });\n    }\n  }, [filterState]); // ====================== Open Keys ======================\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      openKeys = _React$useState6[0],\n      setOpenKeys = _React$useState6[1];\n\n  var openRef = React.useRef();\n\n  var onOpenChange = function onOpenChange(keys) {\n    openRef.current = window.setTimeout(function () {\n      setOpenKeys(keys);\n    });\n  };\n\n  var onMenuClick = function onMenuClick() {\n    window.clearTimeout(openRef.current);\n  };\n\n  React.useEffect(function () {\n    return function () {\n      window.clearTimeout(openRef.current);\n    };\n  }, []); // ======================= Submit ========================\n\n  var internalTriggerFilter = function internalTriggerFilter(keys) {\n    triggerVisible(false);\n    var mergedKeys = keys && keys.length ? keys : null;\n\n    if (mergedKeys === null && (!filterState || !filterState.filteredKeys)) {\n      return null;\n    }\n\n    triggerFilter({\n      column: column,\n      key: columnKey,\n      filteredKeys: mergedKeys\n    });\n  };\n\n  var onConfirm = function onConfirm() {\n    internalTriggerFilter(getFilteredKeysSync());\n  };\n\n  var onReset = function onReset() {\n    internalTriggerFilter([]);\n  };\n\n  var onVisibleChange = function onVisibleChange(newVisible) {\n    triggerVisible(newVisible); // Default will filter when closed\n\n    if (!newVisible && !column.filterDropdown) {\n      onConfirm();\n    }\n  }; // ======================== Style ========================\n\n\n  var dropdownMenuClass = classNames(_defineProperty({}, \"\".concat(dropdownPrefixCls, \"-menu-without-submenu\"), !hasSubMenu(column.filters || [])));\n  var dropdownContent;\n\n  if (typeof column.filterDropdown === 'function') {\n    dropdownContent = column.filterDropdown({\n      prefixCls: \"\".concat(dropdownPrefixCls, \"-custom\"),\n      setSelectedKeys: function setSelectedKeys(selectedKeys) {\n        return onSelectKeys({\n          selectedKeys: selectedKeys\n        });\n      },\n      selectedKeys: getFilteredKeysSync(),\n      confirm: onConfirm,\n      clearFilters: onReset,\n      filters: column.filters,\n      visible: mergedVisible\n    });\n  } else if (column.filterDropdown) {\n    dropdownContent = column.filterDropdown;\n  } else {\n    dropdownContent = React.createElement(React.Fragment, null, React.createElement(Menu, {\n      multiple: filterMultiple,\n      prefixCls: \"\".concat(dropdownPrefixCls, \"-menu\"),\n      className: dropdownMenuClass,\n      onClick: onMenuClick,\n      onSelect: onSelectKeys,\n      onDeselect: onSelectKeys,\n      selectedKeys: getFilteredKeysSync() || [],\n      getPopupContainer: getPopupContainer,\n      openKeys: openKeys,\n      onOpenChange: onOpenChange\n    }, renderFilterItems(column.filters, prefixCls, getFilteredKeysSync(), filterMultiple)), React.createElement(\"div\", {\n      className: \"\".concat(prefixCls, \"-dropdown-btns\")\n    }, React.createElement(\"a\", {\n      className: \"\".concat(prefixCls, \"-dropdown-link confirm\"),\n      onClick: onConfirm\n    }, locale.filterConfirm), React.createElement(\"a\", {\n      className: \"\".concat(prefixCls, \"-dropdown-link clear\"),\n      onClick: onReset\n    }, locale.filterReset)));\n  }\n\n  var menu = React.createElement(FilterDropdownMenuWrapper, {\n    className: \"\".concat(prefixCls, \"-dropdown\")\n  }, dropdownContent);\n  var filterIcon;\n\n  if (typeof column.filterIcon === 'function') {\n    filterIcon = column.filterIcon(filtered);\n  } else if (column.filterIcon) {\n    filterIcon = column.filterIcon;\n  } else {\n    filterIcon = React.createElement(FilterFilled, null);\n  }\n\n  return React.createElement(\"div\", {\n    className: classNames(\"\".concat(prefixCls, \"-column\"))\n  }, React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-column-title\")\n  }, children), React.createElement(\"span\", {\n    className: classNames(\"\".concat(prefixCls, \"-trigger-container\"), _defineProperty({}, \"\".concat(prefixCls, \"-trigger-container-open\"), mergedVisible)),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, React.createElement(Dropdown, {\n    overlay: menu,\n    trigger: ['click'],\n    visible: mergedVisible,\n    onVisibleChange: onVisibleChange,\n    getPopupContainer: getPopupContainer,\n    placement: \"bottomRight\"\n  }, React.createElement(\"span\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: classNames(\"\".concat(prefixCls, \"-trigger\"), {\n      active: filtered\n    })\n  }, filterIcon))));\n}\n\nexport default FilterDropdown;","map":null,"metadata":{},"sourceType":"module"}